[{"C:\\proyectos\\ReactCRUD\\crud\\src\\reportWebVitals.js":"1","C:\\proyectos\\ReactCRUD\\crud\\src\\App.js":"2","C:\\proyectos\\ReactCRUD\\crud\\src\\index.js":"3"},{"size":362,"mtime":1610137675929,"results":"4","hashOfConfig":"5"},{"size":6877,"mtime":1610719903938,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1610137675929,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o9ctw1",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\proyectos\\ReactCRUD\\crud\\src\\reportWebVitals.js",[],"C:\\proyectos\\ReactCRUD\\crud\\src\\App.js",["15"],"import './App.css';\nimport React,{useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport { /*Button, ButtonToggle,*/ Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';\n\n\nfunction App() {\n\n  function refreshPage() {\n    window.location.reload();\n  }\n\n  const baseUrl=\"https://localhost:44352/api/libros\";\n  const[data, setData]=useState([]);\n\n  const [modalInsertar, setModalInsertar]=useState(false);\n  const [modalEditar, setModalEditar]=useState(false);\n  const [modalEliminar, setModalEliminar]=useState(false);\n\n  const [libroSeleccionado, setLibrosSeleccionado]=useState({\n    id: 0,\n    nombreLibro: '',\n    lanzamiento: 0,\n    autor:''\n  });\n  const handleChange=e=>{\n    const {name, value}=e.target;\n    setLibrosSeleccionado({\n      ...libroSeleccionado,\n      [name]: value\n    });\n    console.log(libroSeleccionado);\n  }\n\n  const abrirCerarModalInsertar=()=>{\n    setModalInsertar(!modalInsertar);\n  }\n\n  const abrirCerarModalEditar=()=>{\n    setModalEditar(!modalEditar);\n  }\n\n  const abrirCerrarModalEliminar=()=>{\n    setModalEliminar(!modalEliminar);\n  }\n  \n  const peticionGet=async()=>{\n    await axios.get(baseUrl)\n    .then(response=>{\n      setData(response.data);\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  const peticionPost=async()=>{\n    delete libroSeleccionado.id;\n    libroSeleccionado.lanzamiento=parseInt(libroSeleccionado.lanzamiento);\n    await axios.post(baseUrl, libroSeleccionado)\n    .then(response=>{\n      setData(data.concat(response.data));\n      abrirCerarModalInsertar();\n      refreshPage();\n    }).catch(error=>{\n      console.log(error);\n      abrirCerarModalInsertar();\n      refreshPage();\n    })\n  }\n\n  const peticionPut=async()=>{\n    libroSeleccionado.lanzamiento=parseInt(libroSeleccionado.lanzamiento);\n    await axios.put(baseUrl+\"/\"+libroSeleccionado.id, libroSeleccionado)\n    .then(response=>{\n      var respuesta=response.data;\n      var dataAuxiliar=data;\n      dataAuxiliar.map(libros=>{\n        if(libros.id===libroSeleccionado.id){\n          libros.nombreLibro=respuesta.nombreLibro;\n          libros.lanzamiento=respuesta.lanzamiento;\n          libros.autor=respuesta.autor;\n        }\n      })\n      abrirCerarModalEditar();\n      refreshPage();\n    }).catch(error=>{\n      console.log(error);\n      abrirCerarModalEditar();\n      refreshPage();\n    })\n  }\n\n  const peticionDelete=async()=>{\n    await axios.delete(baseUrl+\"/\"+libroSeleccionado.id)\n    .then(response=>{\n      setData(data.filter(libros=>libros.id!==libros.data));\n      abrirCerrarModalEliminar();\n      refreshPage();\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  const seleccionarLibro=(libro, caso)=>{\n    setLibrosSeleccionado(libro);\n    (caso===\"Editar\")?\n    abrirCerarModalEditar(): abrirCerrarModalEliminar();\n  }\n\n  useEffect(()=>{\n    peticionGet();\n  },[])\n\n  return (\n    <div className=\"App\">\n      <br/>\n      <button onClick={()=>abrirCerarModalInsertar()} className=\"btn btn-success\">Insertar nuevo libro</button>\n      <br/><br/>\n      <table className=\"table table-bordered\">\n        <thead>\n          <th>ID</th>\n          <th>Nombre Libro</th>\n          <th>Lanzamiento</th>\n          <th>Autor</th>\n          <th>Acciones</th>\n        </thead>\n\n        <tbody>\n          {data.map(libros=>(\n            <tr key={libros.id}>\n              <td>{libros.id}</td>\n              <td>{libros.nombreLibro}</td>\n              <td>{libros.lanzamiento}</td>\n              <td>{libros.autor}</td>\n              <td>\n                <button type=\"submit\" className=\"btn btn-primary\" onClick={()=>seleccionarLibro(libros, \"Editar\")}>Editar</button>{\" \"}\n                <button className=\"btn btn-danger\" onClick={()=>seleccionarLibro(libros, \"Eliminar\")}>Eliminar</button>{\" \"}\n              </td>\n            </tr>\n          ))}\n          \n        </tbody>\n      </table>\n\n      {/* Guardar */}\n      <Modal isOpen={modalInsertar}>\n        <ModalHeader>Guardar Libros</ModalHeader>\n        <ModalBody>\n          <div className=\"form-group\">\n            <label>Nombre Libro</label>\n            <br/>\n            <input type=\"text\" className=\"form-control\" name=\"nombreLibro\" onChange={handleChange}/>\n            <br/>\n            <label>Lanzamiento</label>\n            <br/>\n            <input type=\"number\" className=\"form-control\" name=\"lanzamiento\" onChange={handleChange}/>\n            <br/>\n            <label>Autor</label>\n            <br/>\n            <input type=\"text\" className=\"form-control\"name=\"autor\" onChange={handleChange}/>\n            <br/>\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"btn btn-primary\" onClick={()=>peticionPost()}>Insertar</button>{\" \"}\n          <button className=\"btn btn-danger\" onClick={()=>abrirCerarModalInsertar()}>Cancelar</button>\n        </ModalFooter>\n      </Modal>\n\n      {/* Editar */}\n      <Modal isOpen={modalEditar}>\n        <ModalHeader>Editar Libro</ModalHeader>\n        <ModalBody>\n          <div className=\"form-group\">\n            <label>Id</label>\n            <br/>\n            <input type=\"text\" className=\"form-control\"  readOnly onChange={handleChange} value={libroSeleccionado && libroSeleccionado.id}/>\n            <br/>\n            <label>Editar Registro</label>\n            <br/>\n            <input type=\"text\" className=\"form-control\" name=\"nombreLibro\" onChange={handleChange} value={libroSeleccionado && libroSeleccionado.nombreLibro}/>\n            <br/>\n            <label>Lanzamiento</label>\n            <br/>\n            <input type=\"number\" className=\"form-control\" name=\"lanzamiento\" onChange={handleChange} value={libroSeleccionado && libroSeleccionado.lanzamiento}/>\n            <br/>\n            <label>Autor</label>\n            <br/>\n            <input type=\"text\" className=\"form-control\" name=\"autor\" onChange={handleChange} value={libroSeleccionado && libroSeleccionado.autor}/>\n            <br/>\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"btn btn-primary\" name=\"Editar\" onClick={()=>peticionPut()}>Editar</button>{\" \"}\n          <button className=\"btn btn-danger\" name=\"Eliminar\" onClick={()=>abrirCerarModalEditar()}>Cancelar</button>\n        </ModalFooter>\n      </Modal>\n\n      {/* Eliminar */}\n      <Modal isOpen={modalEliminar}>\n        {/* <ModalHeader>Eliminar Libro</ModalHeader> */}\n        <ModalBody>\n        Â¿Esta seguro de eliinar el registro {libroSeleccionado && libroSeleccionado.nombreLibro}?\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"btn btn-danger\" name=\"Editar\" onClick={()=>peticionDelete()}>Si</button>{\" \"}\n          <button className=\"btn btn-success\" name=\"Eliminar\" onClick={()=>abrirCerrarModalEliminar()}>No</button>\n        </ModalFooter>\n      </Modal>\n\n    </div>\n  );\n}\n\nexport default App;\n","C:\\proyectos\\ReactCRUD\\crud\\src\\index.js",[],{"ruleId":"16","severity":1,"message":"17","line":78,"column":30,"nodeType":"18","messageId":"19","endLine":78,"endColumn":32},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]